local M = {}

---@class DicoOptions
---@field default_split string
---@field enable_nofile boolean

local default_opts = {
	default_split = "h",
	enable_nofile = false, -- by default disable creating `Nofile` command
}

local function merge_defaults(opts)
	return vim.tbl_deep_extend("force", default_opts, opts)
end

-- Open unwritable buffer in horizontal or vertical split according to the
-- orientation:
--   * "v" sets vertical
--   * otherwise defaults to horizontal
--
---@alias orientation
---| '"h"' # horizontal split
---| '"v"' # vertical split
---@param split_orientation orientation
local function read_only_buffer(split_orientation)
	vim.print("Opening read only buffer")
	local cmd = "new"
	if split_orientation == "v" then
		cmd = "rightbelow vnew"
	end
  print(cmd)
  vim.cmd(cmd)

	-- create 'nofile', ie, unwriteable, ephemeral buffer
	local buf = vim.api.nvim_get_current_buf()

	-- vim.api.nvim_buf_set_name(buf, "dico")
	-- vim.api.nvim_set_option_value("buftype", "nofile", { buf = buf })
	-- vim.api.nvim_set_option_value("swapfile", false, { buf = buf })

	return buf
end

local function bind_nofile()
	vim.api.nvim_create_user_command("Nofile", function(_)
		read_only_buffer("h")
	end, { nargs = 0 }) -- allow exactly zero arguments
end

local function bind_define()
	vim.api.nvim_create_user_command("Define", function(opts)
    print(opts.fargs[1])
    --define(opts.fargs[1])
	end, { nargs = 1 }) -- allow exactly zero arguments
end

---@param orientation orientation
---@param word string
---@param search_strategy string?
local function define(orientation, word, search_strategy)
	-- handle optional param
	if search_strategy then
		search_strategy = "-s " .. search_strategy
	else
		search_strategy = ""
	end
	local query = "dico " .. search_strategy .. " '" .. word .. "'" .. " | fold"
	-- get definitions
	local definitions = vim.fn.systemlist(query)
	-- open scratch buffer
	local def_buf = read_only_buffer(orientation)
	-- write definitions to buffer
	vim.api.nvim_buf_set_lines(def_buf, 0, -1, false, definitions)
end

--define("h", "pernicious")
read_only_buffer('h')

---@param opts DicoOptions
function M.setup(opts)
	opts = merge_defaults(opts or {})
	bind_nofile()
end

M.setup(default_opts)

return M
